// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"encore.app/receiver/ent/incomingmail"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// IncomingMail is the model entity for the IncomingMail schema.
type IncomingMail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// To holds the value of the "to" field.
	To string `json:"to,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// Raw holds the value of the "raw" field.
	Raw          []byte `json:"raw,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncomingMail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case incomingmail.FieldRaw:
			values[i] = new([]byte)
		case incomingmail.FieldID:
			values[i] = new(sql.NullInt64)
		case incomingmail.FieldTo, incomingmail.FieldFrom:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncomingMail fields.
func (im *IncomingMail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incomingmail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			im.ID = int(value.Int64)
		case incomingmail.FieldTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value.Valid {
				im.To = value.String
			}
		case incomingmail.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				im.From = value.String
			}
		case incomingmail.FieldRaw:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw", values[i])
			} else if value != nil {
				im.Raw = *value
			}
		default:
			im.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IncomingMail.
// This includes values selected through modifiers, order, etc.
func (im *IncomingMail) Value(name string) (ent.Value, error) {
	return im.selectValues.Get(name)
}

// Update returns a builder for updating this IncomingMail.
// Note that you need to call IncomingMail.Unwrap() before calling this method if this IncomingMail
// was returned from a transaction, and the transaction was committed or rolled back.
func (im *IncomingMail) Update() *IncomingMailUpdateOne {
	return NewIncomingMailClient(im.config).UpdateOne(im)
}

// Unwrap unwraps the IncomingMail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (im *IncomingMail) Unwrap() *IncomingMail {
	_tx, ok := im.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncomingMail is not a transactional entity")
	}
	im.config.driver = _tx.drv
	return im
}

// String implements the fmt.Stringer.
func (im *IncomingMail) String() string {
	var builder strings.Builder
	builder.WriteString("IncomingMail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", im.ID))
	builder.WriteString("to=")
	builder.WriteString(im.To)
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(im.From)
	builder.WriteString(", ")
	builder.WriteString("raw=")
	builder.WriteString(fmt.Sprintf("%v", im.Raw))
	builder.WriteByte(')')
	return builder.String()
}

// IncomingMails is a parsable slice of IncomingMail.
type IncomingMails []*IncomingMail
