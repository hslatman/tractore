// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"encore.app/receiver/ent/incomingmail"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IncomingMailCreate is the builder for creating a IncomingMail entity.
type IncomingMailCreate struct {
	config
	mutation *IncomingMailMutation
	hooks    []Hook
}

// SetTo sets the "to" field.
func (imc *IncomingMailCreate) SetTo(s string) *IncomingMailCreate {
	imc.mutation.SetTo(s)
	return imc
}

// SetFrom sets the "from" field.
func (imc *IncomingMailCreate) SetFrom(s string) *IncomingMailCreate {
	imc.mutation.SetFrom(s)
	return imc
}

// SetRaw sets the "raw" field.
func (imc *IncomingMailCreate) SetRaw(b []byte) *IncomingMailCreate {
	imc.mutation.SetRaw(b)
	return imc
}

// Mutation returns the IncomingMailMutation object of the builder.
func (imc *IncomingMailCreate) Mutation() *IncomingMailMutation {
	return imc.mutation
}

// Save creates the IncomingMail in the database.
func (imc *IncomingMailCreate) Save(ctx context.Context) (*IncomingMail, error) {
	return withHooks(ctx, imc.sqlSave, imc.mutation, imc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (imc *IncomingMailCreate) SaveX(ctx context.Context) *IncomingMail {
	v, err := imc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imc *IncomingMailCreate) Exec(ctx context.Context) error {
	_, err := imc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imc *IncomingMailCreate) ExecX(ctx context.Context) {
	if err := imc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imc *IncomingMailCreate) check() error {
	if _, ok := imc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "IncomingMail.to"`)}
	}
	if _, ok := imc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "IncomingMail.from"`)}
	}
	if _, ok := imc.mutation.Raw(); !ok {
		return &ValidationError{Name: "raw", err: errors.New(`ent: missing required field "IncomingMail.raw"`)}
	}
	return nil
}

func (imc *IncomingMailCreate) sqlSave(ctx context.Context) (*IncomingMail, error) {
	if err := imc.check(); err != nil {
		return nil, err
	}
	_node, _spec := imc.createSpec()
	if err := sqlgraph.CreateNode(ctx, imc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	imc.mutation.id = &_node.ID
	imc.mutation.done = true
	return _node, nil
}

func (imc *IncomingMailCreate) createSpec() (*IncomingMail, *sqlgraph.CreateSpec) {
	var (
		_node = &IncomingMail{config: imc.config}
		_spec = sqlgraph.NewCreateSpec(incomingmail.Table, sqlgraph.NewFieldSpec(incomingmail.FieldID, field.TypeInt))
	)
	if value, ok := imc.mutation.To(); ok {
		_spec.SetField(incomingmail.FieldTo, field.TypeString, value)
		_node.To = value
	}
	if value, ok := imc.mutation.From(); ok {
		_spec.SetField(incomingmail.FieldFrom, field.TypeString, value)
		_node.From = value
	}
	if value, ok := imc.mutation.Raw(); ok {
		_spec.SetField(incomingmail.FieldRaw, field.TypeBytes, value)
		_node.Raw = value
	}
	return _node, _spec
}

// IncomingMailCreateBulk is the builder for creating many IncomingMail entities in bulk.
type IncomingMailCreateBulk struct {
	config
	err      error
	builders []*IncomingMailCreate
}

// Save creates the IncomingMail entities in the database.
func (imcb *IncomingMailCreateBulk) Save(ctx context.Context) ([]*IncomingMail, error) {
	if imcb.err != nil {
		return nil, imcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(imcb.builders))
	nodes := make([]*IncomingMail, len(imcb.builders))
	mutators := make([]Mutator, len(imcb.builders))
	for i := range imcb.builders {
		func(i int, root context.Context) {
			builder := imcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncomingMailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, imcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, imcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, imcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (imcb *IncomingMailCreateBulk) SaveX(ctx context.Context) []*IncomingMail {
	v, err := imcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imcb *IncomingMailCreateBulk) Exec(ctx context.Context) error {
	_, err := imcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imcb *IncomingMailCreateBulk) ExecX(ctx context.Context) {
	if err := imcb.Exec(ctx); err != nil {
		panic(err)
	}
}
