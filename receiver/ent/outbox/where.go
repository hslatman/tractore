// Code generated by ent, DO NOT EDIT.

package outbox

import (
	"time"

	"encore.app/receiver/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldID, id))
}

// Topic applies equality check predicate on the "topic" field. It's identical to TopicEQ.
func Topic(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldTopic, v))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v []byte) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldData, v))
}

// InsertedAt applies equality check predicate on the "inserted_at" field. It's identical to InsertedAtEQ.
func InsertedAt(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldInsertedAt, v))
}

// TopicEQ applies the EQ predicate on the "topic" field.
func TopicEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldTopic, v))
}

// TopicNEQ applies the NEQ predicate on the "topic" field.
func TopicNEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldTopic, v))
}

// TopicIn applies the In predicate on the "topic" field.
func TopicIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldTopic, vs...))
}

// TopicNotIn applies the NotIn predicate on the "topic" field.
func TopicNotIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldTopic, vs...))
}

// TopicGT applies the GT predicate on the "topic" field.
func TopicGT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldTopic, v))
}

// TopicGTE applies the GTE predicate on the "topic" field.
func TopicGTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldTopic, v))
}

// TopicLT applies the LT predicate on the "topic" field.
func TopicLT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldTopic, v))
}

// TopicLTE applies the LTE predicate on the "topic" field.
func TopicLTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldTopic, v))
}

// TopicContains applies the Contains predicate on the "topic" field.
func TopicContains(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContains(FieldTopic, v))
}

// TopicHasPrefix applies the HasPrefix predicate on the "topic" field.
func TopicHasPrefix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasPrefix(FieldTopic, v))
}

// TopicHasSuffix applies the HasSuffix predicate on the "topic" field.
func TopicHasSuffix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasSuffix(FieldTopic, v))
}

// TopicEqualFold applies the EqualFold predicate on the "topic" field.
func TopicEqualFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEqualFold(FieldTopic, v))
}

// TopicContainsFold applies the ContainsFold predicate on the "topic" field.
func TopicContainsFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContainsFold(FieldTopic, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v []byte) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v []byte) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...[]byte) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...[]byte) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v []byte) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v []byte) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v []byte) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v []byte) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldData, v))
}

// InsertedAtEQ applies the EQ predicate on the "inserted_at" field.
func InsertedAtEQ(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldInsertedAt, v))
}

// InsertedAtNEQ applies the NEQ predicate on the "inserted_at" field.
func InsertedAtNEQ(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldInsertedAt, v))
}

// InsertedAtIn applies the In predicate on the "inserted_at" field.
func InsertedAtIn(vs ...time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldInsertedAt, vs...))
}

// InsertedAtNotIn applies the NotIn predicate on the "inserted_at" field.
func InsertedAtNotIn(vs ...time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldInsertedAt, vs...))
}

// InsertedAtGT applies the GT predicate on the "inserted_at" field.
func InsertedAtGT(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldInsertedAt, v))
}

// InsertedAtGTE applies the GTE predicate on the "inserted_at" field.
func InsertedAtGTE(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldInsertedAt, v))
}

// InsertedAtLT applies the LT predicate on the "inserted_at" field.
func InsertedAtLT(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldInsertedAt, v))
}

// InsertedAtLTE applies the LTE predicate on the "inserted_at" field.
func InsertedAtLTE(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldInsertedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Outbox) predicate.Outbox {
	return predicate.Outbox(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Outbox) predicate.Outbox {
	return predicate.Outbox(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Outbox) predicate.Outbox {
	return predicate.Outbox(sql.NotPredicates(p))
}
