// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"encore.app/receiver/ent/incomingmail"
	"encore.app/receiver/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IncomingMailUpdate is the builder for updating IncomingMail entities.
type IncomingMailUpdate struct {
	config
	hooks    []Hook
	mutation *IncomingMailMutation
}

// Where appends a list predicates to the IncomingMailUpdate builder.
func (imu *IncomingMailUpdate) Where(ps ...predicate.IncomingMail) *IncomingMailUpdate {
	imu.mutation.Where(ps...)
	return imu
}

// SetTo sets the "to" field.
func (imu *IncomingMailUpdate) SetTo(s string) *IncomingMailUpdate {
	imu.mutation.SetTo(s)
	return imu
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (imu *IncomingMailUpdate) SetNillableTo(s *string) *IncomingMailUpdate {
	if s != nil {
		imu.SetTo(*s)
	}
	return imu
}

// SetFrom sets the "from" field.
func (imu *IncomingMailUpdate) SetFrom(s string) *IncomingMailUpdate {
	imu.mutation.SetFrom(s)
	return imu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (imu *IncomingMailUpdate) SetNillableFrom(s *string) *IncomingMailUpdate {
	if s != nil {
		imu.SetFrom(*s)
	}
	return imu
}

// SetRaw sets the "raw" field.
func (imu *IncomingMailUpdate) SetRaw(b []byte) *IncomingMailUpdate {
	imu.mutation.SetRaw(b)
	return imu
}

// Mutation returns the IncomingMailMutation object of the builder.
func (imu *IncomingMailUpdate) Mutation() *IncomingMailMutation {
	return imu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (imu *IncomingMailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, imu.sqlSave, imu.mutation, imu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imu *IncomingMailUpdate) SaveX(ctx context.Context) int {
	affected, err := imu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (imu *IncomingMailUpdate) Exec(ctx context.Context) error {
	_, err := imu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imu *IncomingMailUpdate) ExecX(ctx context.Context) {
	if err := imu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (imu *IncomingMailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(incomingmail.Table, incomingmail.Columns, sqlgraph.NewFieldSpec(incomingmail.FieldID, field.TypeInt))
	if ps := imu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imu.mutation.To(); ok {
		_spec.SetField(incomingmail.FieldTo, field.TypeString, value)
	}
	if value, ok := imu.mutation.From(); ok {
		_spec.SetField(incomingmail.FieldFrom, field.TypeString, value)
	}
	if value, ok := imu.mutation.Raw(); ok {
		_spec.SetField(incomingmail.FieldRaw, field.TypeBytes, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, imu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incomingmail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	imu.mutation.done = true
	return n, nil
}

// IncomingMailUpdateOne is the builder for updating a single IncomingMail entity.
type IncomingMailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IncomingMailMutation
}

// SetTo sets the "to" field.
func (imuo *IncomingMailUpdateOne) SetTo(s string) *IncomingMailUpdateOne {
	imuo.mutation.SetTo(s)
	return imuo
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (imuo *IncomingMailUpdateOne) SetNillableTo(s *string) *IncomingMailUpdateOne {
	if s != nil {
		imuo.SetTo(*s)
	}
	return imuo
}

// SetFrom sets the "from" field.
func (imuo *IncomingMailUpdateOne) SetFrom(s string) *IncomingMailUpdateOne {
	imuo.mutation.SetFrom(s)
	return imuo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (imuo *IncomingMailUpdateOne) SetNillableFrom(s *string) *IncomingMailUpdateOne {
	if s != nil {
		imuo.SetFrom(*s)
	}
	return imuo
}

// SetRaw sets the "raw" field.
func (imuo *IncomingMailUpdateOne) SetRaw(b []byte) *IncomingMailUpdateOne {
	imuo.mutation.SetRaw(b)
	return imuo
}

// Mutation returns the IncomingMailMutation object of the builder.
func (imuo *IncomingMailUpdateOne) Mutation() *IncomingMailMutation {
	return imuo.mutation
}

// Where appends a list predicates to the IncomingMailUpdate builder.
func (imuo *IncomingMailUpdateOne) Where(ps ...predicate.IncomingMail) *IncomingMailUpdateOne {
	imuo.mutation.Where(ps...)
	return imuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (imuo *IncomingMailUpdateOne) Select(field string, fields ...string) *IncomingMailUpdateOne {
	imuo.fields = append([]string{field}, fields...)
	return imuo
}

// Save executes the query and returns the updated IncomingMail entity.
func (imuo *IncomingMailUpdateOne) Save(ctx context.Context) (*IncomingMail, error) {
	return withHooks(ctx, imuo.sqlSave, imuo.mutation, imuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imuo *IncomingMailUpdateOne) SaveX(ctx context.Context) *IncomingMail {
	node, err := imuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (imuo *IncomingMailUpdateOne) Exec(ctx context.Context) error {
	_, err := imuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imuo *IncomingMailUpdateOne) ExecX(ctx context.Context) {
	if err := imuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (imuo *IncomingMailUpdateOne) sqlSave(ctx context.Context) (_node *IncomingMail, err error) {
	_spec := sqlgraph.NewUpdateSpec(incomingmail.Table, incomingmail.Columns, sqlgraph.NewFieldSpec(incomingmail.FieldID, field.TypeInt))
	id, ok := imuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IncomingMail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := imuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incomingmail.FieldID)
		for _, f := range fields {
			if !incomingmail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != incomingmail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := imuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imuo.mutation.To(); ok {
		_spec.SetField(incomingmail.FieldTo, field.TypeString, value)
	}
	if value, ok := imuo.mutation.From(); ok {
		_spec.SetField(incomingmail.FieldFrom, field.TypeString, value)
	}
	if value, ok := imuo.mutation.Raw(); ok {
		_spec.SetField(incomingmail.FieldRaw, field.TypeBytes, value)
	}
	_node = &IncomingMail{config: imuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, imuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incomingmail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	imuo.mutation.done = true
	return _node, nil
}
