// Code generated by ent, DO NOT EDIT.

package incomingmail

import (
	"encore.app/receiver/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldLTE(FieldID, id))
}

// To applies equality check predicate on the "to" field. It's identical to ToEQ.
func To(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldEQ(FieldTo, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldEQ(FieldFrom, v))
}

// Raw applies equality check predicate on the "raw" field. It's identical to RawEQ.
func Raw(v []byte) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldEQ(FieldRaw, v))
}

// ToEQ applies the EQ predicate on the "to" field.
func ToEQ(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldEQ(FieldTo, v))
}

// ToNEQ applies the NEQ predicate on the "to" field.
func ToNEQ(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldNEQ(FieldTo, v))
}

// ToIn applies the In predicate on the "to" field.
func ToIn(vs ...string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldIn(FieldTo, vs...))
}

// ToNotIn applies the NotIn predicate on the "to" field.
func ToNotIn(vs ...string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldNotIn(FieldTo, vs...))
}

// ToGT applies the GT predicate on the "to" field.
func ToGT(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldGT(FieldTo, v))
}

// ToGTE applies the GTE predicate on the "to" field.
func ToGTE(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldGTE(FieldTo, v))
}

// ToLT applies the LT predicate on the "to" field.
func ToLT(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldLT(FieldTo, v))
}

// ToLTE applies the LTE predicate on the "to" field.
func ToLTE(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldLTE(FieldTo, v))
}

// ToContains applies the Contains predicate on the "to" field.
func ToContains(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldContains(FieldTo, v))
}

// ToHasPrefix applies the HasPrefix predicate on the "to" field.
func ToHasPrefix(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldHasPrefix(FieldTo, v))
}

// ToHasSuffix applies the HasSuffix predicate on the "to" field.
func ToHasSuffix(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldHasSuffix(FieldTo, v))
}

// ToEqualFold applies the EqualFold predicate on the "to" field.
func ToEqualFold(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldEqualFold(FieldTo, v))
}

// ToContainsFold applies the ContainsFold predicate on the "to" field.
func ToContainsFold(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldContainsFold(FieldTo, v))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldHasSuffix(FieldFrom, v))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldContainsFold(FieldFrom, v))
}

// RawEQ applies the EQ predicate on the "raw" field.
func RawEQ(v []byte) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldEQ(FieldRaw, v))
}

// RawNEQ applies the NEQ predicate on the "raw" field.
func RawNEQ(v []byte) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldNEQ(FieldRaw, v))
}

// RawIn applies the In predicate on the "raw" field.
func RawIn(vs ...[]byte) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldIn(FieldRaw, vs...))
}

// RawNotIn applies the NotIn predicate on the "raw" field.
func RawNotIn(vs ...[]byte) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldNotIn(FieldRaw, vs...))
}

// RawGT applies the GT predicate on the "raw" field.
func RawGT(v []byte) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldGT(FieldRaw, v))
}

// RawGTE applies the GTE predicate on the "raw" field.
func RawGTE(v []byte) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldGTE(FieldRaw, v))
}

// RawLT applies the LT predicate on the "raw" field.
func RawLT(v []byte) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldLT(FieldRaw, v))
}

// RawLTE applies the LTE predicate on the "raw" field.
func RawLTE(v []byte) predicate.IncomingMail {
	return predicate.IncomingMail(sql.FieldLTE(FieldRaw, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IncomingMail) predicate.IncomingMail {
	return predicate.IncomingMail(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IncomingMail) predicate.IncomingMail {
	return predicate.IncomingMail(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IncomingMail) predicate.IncomingMail {
	return predicate.IncomingMail(sql.NotPredicates(p))
}
