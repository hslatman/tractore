// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"encore.app/processor/ent/mail"
	"encore.app/processor/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MailUpdate is the builder for updating Mail entities.
type MailUpdate struct {
	config
	hooks    []Hook
	mutation *MailMutation
}

// Where appends a list predicates to the MailUpdate builder.
func (mu *MailUpdate) Where(ps ...predicate.Mail) *MailUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetTo sets the "to" field.
func (mu *MailUpdate) SetTo(s string) *MailUpdate {
	mu.mutation.SetTo(s)
	return mu
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (mu *MailUpdate) SetNillableTo(s *string) *MailUpdate {
	if s != nil {
		mu.SetTo(*s)
	}
	return mu
}

// SetFrom sets the "from" field.
func (mu *MailUpdate) SetFrom(s string) *MailUpdate {
	mu.mutation.SetFrom(s)
	return mu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (mu *MailUpdate) SetNillableFrom(s *string) *MailUpdate {
	if s != nil {
		mu.SetFrom(*s)
	}
	return mu
}

// SetRaw sets the "raw" field.
func (mu *MailUpdate) SetRaw(b []byte) *MailUpdate {
	mu.mutation.SetRaw(b)
	return mu
}

// SetIncomingMailID sets the "incoming_mail_id" field.
func (mu *MailUpdate) SetIncomingMailID(i int) *MailUpdate {
	mu.mutation.ResetIncomingMailID()
	mu.mutation.SetIncomingMailID(i)
	return mu
}

// SetNillableIncomingMailID sets the "incoming_mail_id" field if the given value is not nil.
func (mu *MailUpdate) SetNillableIncomingMailID(i *int) *MailUpdate {
	if i != nil {
		mu.SetIncomingMailID(*i)
	}
	return mu
}

// AddIncomingMailID adds i to the "incoming_mail_id" field.
func (mu *MailUpdate) AddIncomingMailID(i int) *MailUpdate {
	mu.mutation.AddIncomingMailID(i)
	return mu
}

// Mutation returns the MailMutation object of the builder.
func (mu *MailUpdate) Mutation() *MailMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MailUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MailUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MailUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mail.Table, mail.Columns, sqlgraph.NewFieldSpec(mail.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.To(); ok {
		_spec.SetField(mail.FieldTo, field.TypeString, value)
	}
	if value, ok := mu.mutation.From(); ok {
		_spec.SetField(mail.FieldFrom, field.TypeString, value)
	}
	if value, ok := mu.mutation.Raw(); ok {
		_spec.SetField(mail.FieldRaw, field.TypeBytes, value)
	}
	if value, ok := mu.mutation.IncomingMailID(); ok {
		_spec.SetField(mail.FieldIncomingMailID, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedIncomingMailID(); ok {
		_spec.AddField(mail.FieldIncomingMailID, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MailUpdateOne is the builder for updating a single Mail entity.
type MailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MailMutation
}

// SetTo sets the "to" field.
func (muo *MailUpdateOne) SetTo(s string) *MailUpdateOne {
	muo.mutation.SetTo(s)
	return muo
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (muo *MailUpdateOne) SetNillableTo(s *string) *MailUpdateOne {
	if s != nil {
		muo.SetTo(*s)
	}
	return muo
}

// SetFrom sets the "from" field.
func (muo *MailUpdateOne) SetFrom(s string) *MailUpdateOne {
	muo.mutation.SetFrom(s)
	return muo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (muo *MailUpdateOne) SetNillableFrom(s *string) *MailUpdateOne {
	if s != nil {
		muo.SetFrom(*s)
	}
	return muo
}

// SetRaw sets the "raw" field.
func (muo *MailUpdateOne) SetRaw(b []byte) *MailUpdateOne {
	muo.mutation.SetRaw(b)
	return muo
}

// SetIncomingMailID sets the "incoming_mail_id" field.
func (muo *MailUpdateOne) SetIncomingMailID(i int) *MailUpdateOne {
	muo.mutation.ResetIncomingMailID()
	muo.mutation.SetIncomingMailID(i)
	return muo
}

// SetNillableIncomingMailID sets the "incoming_mail_id" field if the given value is not nil.
func (muo *MailUpdateOne) SetNillableIncomingMailID(i *int) *MailUpdateOne {
	if i != nil {
		muo.SetIncomingMailID(*i)
	}
	return muo
}

// AddIncomingMailID adds i to the "incoming_mail_id" field.
func (muo *MailUpdateOne) AddIncomingMailID(i int) *MailUpdateOne {
	muo.mutation.AddIncomingMailID(i)
	return muo
}

// Mutation returns the MailMutation object of the builder.
func (muo *MailUpdateOne) Mutation() *MailMutation {
	return muo.mutation
}

// Where appends a list predicates to the MailUpdate builder.
func (muo *MailUpdateOne) Where(ps ...predicate.Mail) *MailUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MailUpdateOne) Select(field string, fields ...string) *MailUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mail entity.
func (muo *MailUpdateOne) Save(ctx context.Context) (*Mail, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MailUpdateOne) SaveX(ctx context.Context) *Mail {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MailUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MailUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MailUpdateOne) sqlSave(ctx context.Context) (_node *Mail, err error) {
	_spec := sqlgraph.NewUpdateSpec(mail.Table, mail.Columns, sqlgraph.NewFieldSpec(mail.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Mail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mail.FieldID)
		for _, f := range fields {
			if !mail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.To(); ok {
		_spec.SetField(mail.FieldTo, field.TypeString, value)
	}
	if value, ok := muo.mutation.From(); ok {
		_spec.SetField(mail.FieldFrom, field.TypeString, value)
	}
	if value, ok := muo.mutation.Raw(); ok {
		_spec.SetField(mail.FieldRaw, field.TypeBytes, value)
	}
	if value, ok := muo.mutation.IncomingMailID(); ok {
		_spec.SetField(mail.FieldIncomingMailID, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedIncomingMailID(); ok {
		_spec.AddField(mail.FieldIncomingMailID, field.TypeInt, value)
	}
	_node = &Mail{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
