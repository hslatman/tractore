// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"encore.app/processor/ent/mail"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Mail is the model entity for the Mail schema.
type Mail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// To holds the value of the "to" field.
	To string `json:"to,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// Raw holds the value of the "raw" field.
	Raw []byte `json:"raw,omitempty"`
	// IncomingMailID holds the value of the "incoming_mail_id" field.
	IncomingMailID int `json:"incoming_mail_id,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mail.FieldRaw:
			values[i] = new([]byte)
		case mail.FieldID, mail.FieldIncomingMailID:
			values[i] = new(sql.NullInt64)
		case mail.FieldTo, mail.FieldFrom:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mail fields.
func (m *Mail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case mail.FieldTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value.Valid {
				m.To = value.String
			}
		case mail.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				m.From = value.String
			}
		case mail.FieldRaw:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw", values[i])
			} else if value != nil {
				m.Raw = *value
			}
		case mail.FieldIncomingMailID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field incoming_mail_id", values[i])
			} else if value.Valid {
				m.IncomingMailID = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Mail.
// This includes values selected through modifiers, order, etc.
func (m *Mail) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Mail.
// Note that you need to call Mail.Unwrap() before calling this method if this Mail
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mail) Update() *MailUpdateOne {
	return NewMailClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Mail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mail) Unwrap() *Mail {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mail is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mail) String() string {
	var builder strings.Builder
	builder.WriteString("Mail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("to=")
	builder.WriteString(m.To)
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(m.From)
	builder.WriteString(", ")
	builder.WriteString("raw=")
	builder.WriteString(fmt.Sprintf("%v", m.Raw))
	builder.WriteString(", ")
	builder.WriteString("incoming_mail_id=")
	builder.WriteString(fmt.Sprintf("%v", m.IncomingMailID))
	builder.WriteByte(')')
	return builder.String()
}

// Mails is a parsable slice of Mail.
type Mails []*Mail
